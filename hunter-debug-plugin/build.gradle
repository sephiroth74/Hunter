apply plugin: 'groovy'

dependencies {
    implementation gradleApi()
    implementation localGroovy()
    implementation 'com.android.tools.build:gradle:3.5.3'
    implementation 'com.android.tools.build:gradle-api:3.5.3'
    implementation 'commons-io:commons-io:2.6'
    implementation 'commons-codec:commons-codec:1.10'
    //noinspection GradleDependency
    implementation "org.ow2.asm:asm:$asm_version"
    //noinspection GradleDependency
    implementation "org.ow2.asm:asm-util:$asm_version"
    //noinspection GradleDependency
    implementation "org.ow2.asm:asm-commons:$asm_version"
//    implementation 'com.quinn.hunter:hunter-transform:0.9.3'
//    implementation 'com.quinn.hunter:hunter-transform:1.0.0-SNAPSHOT'
    implementation fileTree(include: ['*.jar'], dir: "$rootDir/hunter-transform/build/libs")
}

repositories {
    google()
    jcenter()
    mavenCentral()
}

def props = extensions.extraProperties.properties
version = props.get('hunter.debug.plugin.version') + '-' + (new Date().format('yyyyMMdd'))
group   = props.get('hunter.default.library.group')

ext {
    bintrayRepo = 'maven'
    bintrayName = name

    publishedGroupId = group
    libraryName = name
    artifact = name

    libraryDescription = 'A fast, incremental, cocurrent framework to develop compile plugin for android project'

    siteUrl = 'https://github.com/Leaking/Hunter'
    gitUrl = 'https://github.com/Leaking/Hunter.git'

    libraryVersion = version

    developerId = 'Leaking'
    developerName = 'QuinnChen'
    developerEmail = 'chenhuazhaoao@gmail.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}

//apply from: 'https://raw.githubusercontent.com/nuuneoi/JCenter/master/installv1.gradle'
//apply from: 'https://raw.githubusercontent.com/nuuneoi/JCenter/master/bintrayv1.gradle'

//publish script for debug mode

evaluationDependsOn(':hunter-transform')

apply plugin: 'maven'

print(group + ':' + name + ':' + version)

def localRepoURL = 'file://' + new File(System.getProperty('user.home'), '.m2/repository').absolutePath

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: localRepoURL)
        }
    }
}