apply plugin: 'groovy'


version = rootProject.ext.hunter_version
group = rootProject.ext.hunter_library_group

def props = extensions.extraProperties.properties
def repoPath = props.get('hunter.repo.path')
def repoUrl = props.get('hunter.repo.url')
def licenseUrl = props.get('hunter.license.url')
def licenseName = props.get('hunter.license.name')


dependencies {
    implementation gradleApi()
    implementation localGroovy()
    implementation 'com.android.tools.build:gradle:4.1.3'
    implementation 'com.android.tools.build:gradle-api:4.1.3'
    //noinspection GradleDependency
    implementation "org.ow2.asm:asm:${asm_version}"
    //noinspection GradleDependency
    implementation "org.ow2.asm:asm-util:${asm_version}"
    //noinspection GradleDependency
    implementation "org.ow2.asm:asm-commons:${asm_version}"
//    implementation 'com.quinn.hunter:hunter-transform:1.0.0'
    implementation "it.sephiroth.hunter:hunter-transform:$hunter_version"
}

println(group + ':' + name + ':' + version)

if (is_local) {
    apply plugin: 'maven'

    def localRepoURL = 'file://' + new File(System.getProperty('user.home'), '.m2/repository').absolutePath

    uploadArchives {
        repositories {
            mavenDeployer {
                repository(url: localRepoURL)
            }
        }
    }

} else {

    apply plugin: 'com.bmuschko.nexus'

    modifyPom {
        project {
            name 'Hunter Debug Plugin'
            description 'Debug Plugin for Android'
            url repoUrl

            scm {
                url repoUrl
                connection 'scm:https://git@' + repoPath + '.git'
                developerConnection 'scm:git://' + repoPath + '.git'
            }

            licenses {
                license {
                    name licenseName
                    url licenseUrl
                    distribution 'repo'
                }
            }

            developers {
                developer {
                    id props.get('hunter.developer.id')
                    name props.get('hunter.developer.name')
                    email props.get('hunter.developer.email')
                    roles 'architect', 'developer'
                }
            }
            contributors {
                contributor {
                    name props.get('hunter.contributor1.name')
                    email props.get('hunter.contributor1.email')
                    roles 'developer'
                }
            }
        }
    }

    extraArchive {
        sources = true
        tests = false
        javadoc = true
    }
}
